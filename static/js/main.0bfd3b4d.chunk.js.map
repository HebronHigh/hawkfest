{"version":3,"sources":["components/Map.jsx","App.js","index.js"],"names":["highlight","e","layer","target","console","log","setStyle","color","fillColor","bringToFront","resetHighlight","weight","getColors","feature","properties","REGION","Map","onEachCountry","country","bindPopup","url","ADMIN","on","mouseover","mouseout","data","MapContainer","style","height","minZoom","maxZoom","zoom","center","maxBounds","latLngBounds","latLng","maxBoundsViscosity","TileLayer","attribution","GeoJSON","fillOpacity","features","onEachFeature","this","Component","App","history","createBrowserHistory","listen","location","ReactGA","initialize","set","page","pathname","pageview","exact","path","render","window","href","ReactDOM","StrictMode","document","getElementById"],"mappings":"qu4nBAwBA,SAASA,EAAUC,GACjB,IAAMC,EAAQD,EAAEE,OAChBC,QAAQC,IAAIH,GACZA,EAAMI,SAAS,CACbC,MAAO,UACPC,UAAW,YAEbN,EAAMO,eAUR,SAASC,EAAeT,GACtB,IAAMC,EAAQD,EAAEE,OAChBD,EAAMI,SAAS,CACbK,OAAQ,EACRJ,MAAO,QACPC,UAAWI,EAAUV,EAAMW,WAa/B,SAASD,EAAUC,GAEjB,OADqBA,EAAQC,WAAWC,QAEtC,KAAK,EAAG,MAAO,SACf,KAAK,EAAG,MAAO,MACf,KAAK,EAAG,MAAO,QACf,KAAK,EAAG,MAAO,OACf,KAAK,EAAG,MAAO,OACf,QAAS,MAAO,S,IAwDLC,E,4MA1CbC,cAAgB,SAACC,EAAShB,GACxBA,EAAMiB,WAAU,WACd,IAAMC,EAAM,mBAAqBF,EAAQJ,WAAWO,MAAQ,uBAC5D,OAAOH,EAAQJ,WAAWO,MAAQ,iBAAmBD,EAAM,oBAG7DlB,EAAMoB,GAAG,CACPC,UAAWvB,EACXwB,SAAUd,K,uDAZd,WACEN,QAAQC,IAAIoB,K,oBAed,WACE,OACE,gCACA,yCACE,eAACC,EAAA,EAAD,CAAcC,MAAO,CAAEC,OAAQ,QAAUC,QAAS,EAAGC,QAAS,EAAGC,KAAM,EAAGC,OAAQ,CAAC,OAAQ,QAASC,UAAWC,uBAAaC,kBAAQ,IAAI,KAAKA,iBAAO,GAAG,MAAOC,mBAAoB,EAAlL,UACE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZlB,IAAI,uDAGN,cAACmB,EAAA,EAAD,CACEZ,MACE,SAAUd,GACR,MAAO,CACLL,UAAWI,EAAUC,GACrBF,OAAQ,EACR6B,YAAa,GACbjC,MAAO,UAIbkB,KAAMA,EAAKgB,SACXC,cAAeC,KAAK1B,0B,GAvCd2B,a,gBCrDHC,MAhBf,WACE,IAAMC,EAAUC,cAMhB,OALAD,EAAQE,QAAO,SAAAC,GACbC,IAAQC,WAAW,kBACnBD,IAAQE,IAAI,CAAEC,KAAMJ,EAASK,WAC7BJ,IAAQK,SAASN,EAASK,aAG1B,eAAC,IAAD,CAAeR,QAASA,EAAxB,UACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,8CAA8CC,OAAQ,WAAQC,OAAOV,SAASW,KAAO,qDCX7GC,IAASH,OACP,cAAC,IAAMI,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0bfd3b4d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { MapContainer, GeoJSON, TileLayer } from 'react-leaflet'\r\nimport data from './../data/countries.json'\r\nimport 'leaflet/dist/leaflet.css'\r\nimport './Map.css'\r\nimport { latLng, latLngBounds } from 'leaflet';\r\n\r\n/*\r\n  REGION NUMBERS GUIDE:\r\n  0: Southwest Asia & Northern Africa\r\n  1: Sub-Saharan Africa & Australia\r\n  2: Monsoon Asia\r\n  3: Europe & Russia\r\n  4: Western Hemisphere\r\n*/\r\n\r\n\r\n/**\r\n * Highlights a layer that was hovered over in the map\r\n *\r\n * @param {*} e the object that was hovered over\r\n *\r\n * @author Ethan Maher\r\n */\r\nfunction highlight(e) {\r\n  const layer = e.target;\r\n  console.log(layer)\r\n  layer.setStyle({\r\n    color: '#ff007f',\r\n    fillColor: '#ff007f'\r\n  })\r\n  layer.bringToFront();\r\n}\r\n\r\n/**\r\n * Unhighlights a layer that is no longer hovered over based on the region that layer is in (determined in JSON properties)\r\n *\r\n * @param {*} e the object that was stopped being hovered over\r\n *\r\n * @author Ethan Maher\r\n */\r\nfunction resetHighlight(e) {\r\n  const layer = e.target;\r\n  layer.setStyle({\r\n    weight: 1,\r\n    color: 'black',\r\n    fillColor: getColors(layer.feature)\r\n  })\r\n}\r\n\r\n/**\r\n * Returns the correct color of a layer from the REGION property in the JSON\r\n *\r\n * @param {*} layer the layer to get the original color of\r\n *\r\n * @returns the color that the layer needs to be\r\n *\r\n * @author Ethan Maher\r\n */\r\nfunction getColors(feature) {\r\n  const regionNumber = feature.properties.REGION;\r\n  switch (regionNumber) {\r\n    case 0: return 'yellow';\r\n    case 1: return 'red';\r\n    case 2: return 'green';\r\n    case 3: return 'aqua';\r\n    case 4: return 'blue';\r\n    default: return 'black';\r\n  }\r\n}\r\n\r\n/**\r\n * Class for Map component\r\n *\r\n * @author Ethan Maher\r\n */\r\nclass Map extends Component {\r\n  componentDidMount() {\r\n    console.log(data)\r\n  }\r\n\r\n  onEachCountry = (country, layer) => {\r\n    layer.bindPopup(function () {\r\n      const url = \"/hawkfest/pages/\" + country.properties.ADMIN + \"/General%20Info.html\"\r\n      return country.properties.ADMIN + \"<br /><a href=\" + url + \">View More</a>\";\r\n    })\r\n\r\n    layer.on({\r\n      mouseover: highlight,\r\n      mouseout: resetHighlight\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <h1> My Map</h1>\r\n        <MapContainer style={{ height: \"90vh\" }} minZoom={2} maxZoom={7} zoom={2} center={[12.345, 12.345]} maxBounds={latLngBounds(latLng(-90,-200),latLng(90,200))} maxBoundsViscosity={1.0}>\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n\r\n          <GeoJSON\r\n            style={\r\n              function (feature) {\r\n                return {\r\n                  fillColor: getColors(feature),\r\n                  weight: 1,\r\n                  fillOpacity: .4,\r\n                  color: 'black'\r\n                }\r\n              }\r\n            }\r\n            data={data.features}\r\n            onEachFeature={this.onEachCountry}\r\n          />\r\n        </MapContainer>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Map","import './App.css';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport Map from './components/Map'\nimport { useEffect } from 'react'\nimport ReactGA from 'react-ga'\nimport { createBrowserHistory } from 'history';\n\nfunction App() {\n  const history = createBrowserHistory();\n  history.listen(location => {\n    ReactGA.initialize('UA-193267831-1');\n    ReactGA.set({ page: location.pathname });\n    ReactGA.pageview(location.pathname);\n  })\n  return (\n    <BrowserRouter history={history}>\n      <Map />\n      <Route exact path='/hawkfest/pages/Lesotho/General%20Info.html' render={() => { window.location.href = \"/hawkfest/pages/Lesotho/General%20Info.html\" }} />\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport ReactGA from 'react-ga'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}